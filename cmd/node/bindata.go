// Code generated by go-bindata.
// sources:
// img/ok.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imgOkPng = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x36\x0f\xc9\xf0\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x7c\x00\x00\x00\x7c\x08\x06\x00\x00\x00\xab\x1e\xd4\xbe\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x0e\xed\x49\x44\x41\x54\x78\x01\xed\x9d\x6d\x6c\x1c\xc5\x19\xc7\x67\xf6\xce\x77\x46\x39\x8b\xe2\xa8\x48\xa1\x09\x94\x0f\x24\x2d\x55\x80\x14\xa1\x4a\x50\x48\x13\x01\x0e\xc4\xb1\x23\x22\x4b\x6d\x51\xca\x87\xa4\x46\x05\xa7\xa9\x55\x81\x4a\x69\x55\xb7\x82\x16\x41\x51\x4a\x63\xa8\x70\x13\xa9\x80\x68\x91\x52\xa2\xd8\x71\x88\x9d\x46\x58\x49\x01\xa9\x45\x28\x0d\x2e\x6d\x81\x0f\x29\xa4\x34\x12\x95\x0d\xe8\x6c\x91\x7b\x9d\xfe\x9f\xbd\x5b\x7b\x7d\xbe\x3d\xef\xee\xcd\xec\xee\xed\xed\x4a\xf6\xee\xcd\xce\xce\xcb\xff\xb7\xb3\x3b\x33\xfb\xcc\x0c\x67\x21\xda\x7a\x26\xee\x49\x15\x32\xf9\xd5\xc5\x42\x71\x0d\x2b\xb2\x35\x45\xce\x56\x73\xc6\xda\x91\xc5\xb6\xd2\x9f\x68\x63\xc2\x38\xd6\x33\x9e\x66\x9c\xa5\x19\xe3\xf8\xa3\x3d\x4b\x0b\xc6\xa6\x35\xc1\xde\x61\x1a\x7b\x5b\x8b\x69\x6f\xc7\x92\xf1\x77\x0e\x6c\x78\x6a\x46\xf7\x1d\x82\x7f\xd0\xa3\x31\xb7\x81\x89\x81\xf8\xe9\xf3\xe7\xae\x2b\x16\x0a\x1b\x99\x10\x37\x09\xce\xbf\x84\xfd\xe7\x94\xe4\x86\xf3\x0f\xb8\x10\x6f\x31\xce\x4f\x6a\xb1\xd8\xcb\x57\xb7\xae\x78\x7d\x60\xc3\x40\x5e\x49\x5c\x8a\x03\x6d\x28\xe0\xdd\x47\x7a\xd7\x02\x6a\x07\x63\x62\x03\x4a\xea\x4d\x82\x89\x94\x62\x7d\xaa\x06\xcf\x19\x9f\xc1\x93\xe1\x24\x9e\x0c\x13\xb8\x09\xc6\x87\x37\x0f\x4d\x56\xf5\x18\x40\xc7\xc0\x03\xef\x3a\xd6\x77\x09\xcb\x9d\xbf\x93\x0b\xb6\x5d\x08\xb1\x36\x80\x1a\x82\x39\x9f\x14\x9c\x3d\xc7\x5a\x5a\x9f\x1f\xb9\x75\xf0\xbf\x41\x4c\xa3\x91\xa6\x40\x02\xef\x79\xad\xff\x82\xcc\xd4\xcc\x1d\x9c\x15\xbf\x85\x52\x74\x33\x4a\xb2\x66\x24\x38\xc8\x7b\x94\xfc\x22\x9e\x3e\xc7\x05\xd3\x9e\x4d\x2e\x4f\x1d\x3c\x70\xfd\x9e\x4f\x83\x96\xde\x40\x01\xef\x7a\xe5\xfe\x36\xfe\xc9\xf4\xbd\xa8\x70\xf5\x03\xf2\xc5\x41\x13\xcb\x49\x7a\x00\xff\x43\x54\xfc\xf6\x88\x0b\xdb\x9f\x1c\xf9\xea\xa3\x54\x21\x0c\xc4\x16\x08\xe0\x3d\x63\x3b\xda\xb3\x79\x6d\x37\x20\xef\xc2\x3b\xfa\xa2\x40\x28\x23\x2b\x11\x9c\x7f\x04\xf8\x7b\x13\xf1\xe2\x13\x07\x36\xed\x9f\x96\x15\xac\xdb\x70\x7c\x05\x4e\xcd\xa8\xec\x4c\xf6\x41\x24\xbe\xcf\xaf\x0a\x98\x5b\xe1\x9c\x5e\xa7\x57\xf4\x18\x1b\x4c\xa4\x12\x0f\xfb\xd9\xcc\xf3\x0d\x78\xd7\xe8\x8e\x1e\xbc\x9f\xf7\x28\x6b\x4a\x39\x25\xe2\x95\x7f\x34\xf1\xf0\x9e\xef\x1f\xe9\xdc\x7f\xc0\xab\x28\xcd\xf1\x78\x0e\x7c\xdb\xe1\xbb\xaf\xc8\xb3\xfc\x20\x3a\x38\x6e\x35\x27\xa4\xd9\x8e\x21\xfc\xb1\x38\x8b\xf7\xbd\xb8\xe5\xe9\x77\xbd\xcc\xbb\x67\xc0\xa9\xa3\xe4\x6f\x33\xff\xf9\x11\x7a\xbf\x7e\x80\x52\x9d\xf4\x32\x93\x81\x8d\x8b\xf3\x0c\x7a\xf5\x1e\xb9\x26\xb5\xf2\x21\xaf\x3a\x72\x3c\x01\xde\x3d\x7e\xcf\x2a\x91\xcb\xfe\x01\xa0\x6f\x08\xac\xf8\x7e\x26\x8c\xf3\x57\x79\x4b\xe2\x1b\xc3\x1d\x4f\x9d\x55\x9d\x0c\xe5\xc0\xbb\x46\x7b\x37\x73\x51\x78\x06\x8f\xf0\xe5\xaa\x33\xd3\xc8\xe1\x03\xc4\x94\xe0\xb1\xbb\x46\x3a\x87\x8e\xa8\xcc\x87\x32\xe0\xf4\x08\x3f\x35\x7b\xf6\x17\x00\xfd\x7d\x74\x83\x2a\x8b\x47\xa5\x38\x9e\x87\xcd\x19\x3a\xec\xd8\xe3\xeb\x96\xad\x7a\x40\xd5\x23\x5e\x09\x88\x9e\x3f\xf5\x5e\x98\x39\x5f\x1c\x46\x6d\x74\xbd\xe7\xa2\x85\x22\x42\x7e\x22\xd9\xaa\x75\x1f\xb8\x65\xe8\x13\xd9\xd9\x91\x0e\xfc\x8e\xb1\xde\x15\xf9\x7c\xe1\x28\x4a\xf5\xd5\xb2\x13\xdb\x54\xe1\x71\x76\x3a\x1e\x8f\xdd\x76\x70\xd3\xd0\x39\x99\xf9\x96\x0a\x9c\x9a\x5c\x39\x56\x18\x47\xc9\xbe\x5c\x66\x22\x9b\x37\x2c\x7e\xa6\x85\xc5\x3a\x64\x36\xdd\xa4\x01\xdf\x3a\xba\xf3\x5a\x21\xd8\x4b\x8d\xde\x07\x1e\xb4\x9b\x8b\xfa\xe4\x39\x67\xb7\x1f\xea\xdc\xf7\x86\x8c\xb4\x49\x01\x5e\x82\x2d\x26\x50\x41\x23\xcb\x92\x68\x93\xac\x00\x20\xa5\xf1\x09\x76\x83\x0c\xe8\x75\x7f\x76\xa4\xc7\x78\x91\x89\xa3\x11\x6c\xc9\x94\x4d\xc1\x91\xb6\xf4\xf4\x24\xad\x4d\xce\xae\x0e\xeb\x02\x4e\x15\x34\xfd\x9d\x2d\xd8\x67\x5d\xc5\x1e\x5d\x64\x5b\x01\x7a\x55\x92\xd6\xa4\xb9\xed\x8b\xaa\x78\x74\x0d\x9c\x9a\x5e\xf9\x5c\x71\x2c\xaa\xa0\x55\x51\x55\x99\x93\xb8\x9c\x34\x27\xed\xdd\x46\xe1\x0a\x38\x75\xaa\x94\xdb\xd9\x57\xb9\x8d\x38\xba\xce\xad\x02\xe2\x2a\xd2\x9e\x18\xb8\x09\xc1\x15\x70\xea\x41\x8b\x3a\x55\xdc\xc8\x2d\xeb\x1a\xb1\xbe\xc4\xc0\x79\x78\x8e\x6b\xe9\xd4\x37\xce\x58\xe1\x70\xd4\x5d\xea\x5c\x6c\xa9\x57\xa0\x1b\x96\xb1\xd8\x16\xa7\x7d\xef\x8e\x80\xd3\x57\x2f\x96\xcd\x9c\x42\x4c\xd1\x87\x10\xa9\xf4\xdc\x05\x06\x78\x53\x2c\x91\x5c\xe7\xe4\x2b\x9b\xed\x47\xba\xfe\xce\xc8\x65\x5f\x88\x60\xbb\x83\xa3\xe2\x2a\x9d\x05\x98\x38\x79\x9f\xdb\x06\x7e\x6a\xf6\x83\x1f\xc3\x2e\xfc\x7a\x15\x09\x8f\xc2\x74\xaf\x00\x31\x21\xc3\x12\xbb\x21\xd8\x7a\xa4\xeb\x7d\xe4\xbc\x30\x19\x59\xaa\xd8\x95\xd5\x63\x7f\xb0\x9c\x69\x11\xb1\xb5\x76\xfa\xdc\x6d\x95\x70\xb2\x41\x8b\x60\x7b\x0c\xd1\x49\x74\x30\x19\xd3\x19\xd9\xb8\x66\x49\xe0\x64\x5d\x8a\x77\x45\x53\x1b\x1c\xda\xd0\xd1\x77\x2f\xc4\xa8\x64\x09\x5c\x3b\x29\x35\x1f\xe9\x64\x37\x9e\x99\xcd\xfe\x0b\xa5\x5b\xcd\xa8\xcc\xda\x69\x8b\xce\x3a\x55\x00\x26\xd0\xc9\x65\x89\x2f\xd4\xb2\x7b\xaf\x59\xc2\xf5\x41\x02\x11\x6c\xa7\xb2\xfb\xe7\x1f\xac\xca\x03\x3b\x2c\xd3\x60\x59\xc2\xf5\xe1\x3f\x39\xfe\x5e\xd8\x47\x84\x58\x2a\xd3\xa0\x27\x68\x84\x4b\xa2\x45\x5c\x66\x35\xac\xc9\xb2\x84\x97\xc7\x7a\xf9\x32\xfe\xba\x41\xb5\x0e\x44\xb2\xa9\x80\x12\x3b\xab\xc4\x54\x2d\xe1\x34\x8a\x93\x7d\x3c\xfd\x1e\xde\xdd\xe1\x1a\xd8\x67\xa5\x42\xd8\xdc\x31\x80\x91\x7d\xa6\xfd\xb2\x6a\xa3\x56\xab\x96\x70\x7d\xc8\x6e\x04\x5b\xea\x6d\x00\x8b\x95\x7f\x72\xae\xfd\x8c\x31\xad\x17\xc7\x7b\x51\xd2\xd4\x0d\x21\x06\x3b\x9d\x61\x95\x1c\x2c\x2a\xe1\x34\x18\x3f\x3b\x95\xfe\x77\x64\x9b\x56\x45\x2d\x97\x4e\x78\xaf\xfe\xfa\xd2\xd8\x05\xf7\xef\xbd\x7d\x6f\xc6\x08\x02\xdf\xb4\x2f\xc5\x67\xce\x3f\xe2\xab\xe3\x75\x86\x9b\xcc\x3d\xd9\xc2\x25\x96\xb7\x7d\xbe\x72\x52\x82\x45\x25\x3c\x37\x9d\xde\x16\xc1\x96\x27\x3d\x84\x7f\x64\x78\xcb\xbe\xdd\x66\xd8\x14\x3a\x6c\xce\xdf\x87\xed\xf9\x2d\x30\x50\xfc\x8b\xbc\xd8\xe6\x43\x22\x86\xc4\x72\xde\xa5\x74\xb4\x08\x38\xfa\x66\xb7\x57\x7a\x8a\x7e\xbb\x53\xa0\x0c\xfb\x01\xab\xab\x69\xa0\x41\x22\x19\xeb\x50\x06\xbd\x0a\xcb\x05\x8f\x74\x9a\x40\x87\x67\xce\x9f\xc5\xdd\xb1\xe8\x46\xb0\x4a\x74\xe4\x5e\x5d\x81\xa5\x60\x9b\xaf\x22\x93\xa5\x6c\xa6\x30\x0e\x43\xc5\xaf\x98\xdd\xeb\x3d\x46\x1a\x8a\x22\xd9\xba\xca\x3c\xd1\xd0\x42\xb0\x98\x2d\x29\x82\x5d\xaf\xcc\x98\xe6\xa0\xf4\x18\xb7\x2c\xd9\x95\x31\xa8\x2a\xe9\x3a\x4b\x30\x35\xc7\xb7\x00\x38\x4d\x8d\x65\x3e\x19\x1d\x3b\x57\xc0\x29\x6c\x23\x06\x55\xd0\x2b\x99\xce\x01\xdf\x76\x74\xe7\x55\x41\x9d\x07\xcd\x10\x25\xe8\x7b\xb7\xb0\x8d\x7c\x11\xf4\x65\x2c\x71\x1b\x26\x7e\xc3\xb4\x20\x72\x36\x62\xaa\x4f\x68\x58\x0e\x6e\x0e\x78\xbe\xc0\xa3\x2f\x62\x75\x68\x5c\x2f\x6c\x23\xea\xdf\x77\xfe\xe6\x23\x8d\xb3\xfb\x8c\xdf\x52\xf6\xfa\xec\x95\xa5\x90\xe6\x80\x0b\x51\xdc\x28\x25\xf0\x26\x0c\x44\x16\x6c\x43\xba\x16\x96\x98\x30\x8e\xe5\xec\x31\x55\x69\x79\xd3\x81\x93\x4d\x14\x12\x7d\xa3\xe1\x18\xed\xed\x2b\x20\x1b\x36\xc5\x5c\x88\xe5\x17\xb4\x9e\xec\xa7\xc6\xc2\x27\xe6\xa5\x35\xec\xde\x74\xe0\x34\x2b\x31\x6a\x74\xd1\x87\x12\x0b\xbd\xac\x9c\x55\xc0\xa6\xb8\x30\xfd\xf7\xd7\xac\xe2\x74\xe3\x4e\x6c\x89\x31\x5d\xab\x03\xd7\xa7\xa0\x76\x13\x52\x13\x5f\xa3\x0a\xf6\xd6\x89\xef\x7d\xa6\x28\xd8\x63\xb2\xa5\x35\x18\xeb\xc0\x61\x1e\xb3\x5e\x76\x04\x61\x0e\x4f\x15\x6c\xea\x80\x11\xb3\xe9\x31\x25\x16\x46\x98\x53\x9e\x98\xe8\xc0\xb1\xbf\x32\xcc\x80\x64\xe6\x4d\x25\x6c\x15\xbd\x6d\x46\xde\xf5\x05\x04\xf0\x83\xeb\x76\x6b\x33\x19\x75\x9f\xea\x8c\x18\x43\xb0\x6f\x54\xd8\x86\xf4\xc9\x54\xb2\x4d\xa3\x35\x42\x0c\x87\x68\x6f\xad\x40\xa3\xc3\xa6\x9c\x11\x6b\x4d\x5f\x10\xc6\x3a\x9f\xd1\x19\x28\x10\x06\xd8\x04\x92\x58\x6b\xb4\xfa\x4f\x44\xd5\x5a\x81\xb0\xc0\xd6\x73\x08\xd6\x1a\x2d\xf5\x64\x9d\xdd\xe6\x3e\x13\x2a\xd8\x40\x49\xac\xe3\x58\x9e\x69\x39\x9a\x65\x9e\x6e\xe8\x46\xc2\x7a\x61\xfc\x77\x42\xf0\x49\x7c\xfc\x5f\x09\x33\x9f\x1e\x74\xf2\x7f\xd1\xd3\x44\x2c\x11\x59\xd8\x60\x53\x76\x89\x35\x4d\x1b\xe1\xe9\x54\x5b\x30\xe0\xfb\x6b\x22\xa9\xf5\xe0\xcb\xd0\xfb\x86\xe6\xbb\x5e\xda\xf5\xf3\xf7\x0b\x9f\x3e\x8a\x1e\xa1\xef\x1a\x6e\x7e\xee\xc3\x08\xbb\xac\x67\x5b\x1c\x25\x2d\x85\x86\xbe\x27\xfa\x92\x29\x0f\x60\x77\xd0\x67\x40\x73\x84\x65\x7b\xaf\xdd\x5d\x47\xbe\x3d\xcb\x8a\x45\xdb\x86\x03\xe6\x30\x64\x1d\x87\x18\x36\x8a\x38\x4f\xa1\xe3\x05\xcb\x33\x7a\xb0\x95\x60\xc7\x16\xc1\x36\x47\x3d\xb2\xf9\xb7\x3f\x64\x9a\x86\xf9\x63\xfc\xd9\x42\x0d\x5b\x97\x54\xb4\x69\x98\x29\x44\x39\x70\x3b\xb0\x0d\xc4\x04\x9d\x84\x37\x7e\x7b\xb5\x0f\x3f\x6c\x28\x09\xd6\xd4\xb5\xaa\x14\xb8\x13\xd8\x06\x5c\x98\xf5\x3e\xe0\x25\xf4\xa6\x80\x5d\x12\x57\x07\x6e\xe8\x2c\x7d\xef\x06\xb6\x91\x08\xaf\xa0\x37\x11\x6c\x5d\x5a\x2a\xe1\x6a\xfa\xd1\x69\x45\xde\x65\x6d\x9b\x2a\x2b\x68\x06\x50\x3b\x7b\x82\xae\xf2\x9d\xde\x6c\xb0\x89\xb5\x86\x7e\x43\x25\xc0\xc9\x2e\xeb\xd0\x86\x5f\x7d\x6c\x07\x6c\x2d\x3f\xaa\xde\xe9\x4d\x08\x9b\xfa\x88\x01\xbc\xb4\x58\x7a\x2d\xcd\x5d\x9d\x93\x69\x97\x25\xfb\xf1\xde\x94\xb0\x75\x8a\x9c\x80\xab\x29\xe1\xae\xee\x92\x1a\x17\xc9\x82\xde\xbc\xb0\x75\x71\xd5\x01\xcf\xb1\xec\x9c\xa5\x64\x0d\x8e\x8e\x4e\xd5\x0b\xbd\xc9\x61\x93\xd6\x69\x2c\x8c\xc7\x94\xac\x78\x4b\x76\x59\x64\x9f\xe5\x88\xa8\x0d\xcf\x6e\xa1\x47\xb0\xa9\x19\xce\xa6\x35\x10\x7f\xc7\x86\xce\xce\xbd\x60\x82\x19\xb2\xcf\xaa\x67\x6e\x6f\xab\x48\x9d\x42\x8f\x60\x97\x94\x24\xd6\x1a\xac\xda\xde\xb6\x12\xb6\x5e\x77\x1a\x0d\x49\x76\x5a\x7e\x42\x8f\x60\x9b\x28\x82\xb5\xa6\xc5\x34\x65\xc0\x29\x2a\x3f\xa1\x47\xb0\x4d\xb0\x71\x48\xac\xb5\x58\x32\xae\xe6\x91\x6e\x8a\xcb\x0f\xe8\x11\x6c\x13\x80\xf2\x21\xb1\xd6\xf4\x59\xfb\x24\x8e\x56\x5c\x1c\x4d\xc9\xc5\x4b\xe8\x11\xec\x2a\x14\xc0\x98\x58\x53\x3b\x9c\xb6\x7f\x94\x76\x6a\xff\x7b\x01\x3d\x82\x5d\x9d\x21\xac\x5d\xde\xa2\x33\x3a\x70\x98\x1c\x9d\xa8\xee\x4d\xbe\xab\x6a\xe8\x54\x83\x97\x9d\x6a\x55\x53\x72\xc8\x4e\x67\xcd\xf0\x38\x3f\x49\xe7\x75\xe0\x5a\x2c\xf6\x72\x4d\xcf\x92\x4f\xaa\x84\x2e\x39\xa9\x2c\x14\xb0\x09\x74\x99\xb1\x0e\xfc\xea\xd6\x15\xaf\xe3\x51\x38\x23\x5b\xac\x5a\xe1\x35\x02\xf4\xb0\xc0\x26\xb6\xc4\x98\x78\xe8\xc0\xf5\xc5\xc9\x39\xd3\x8b\x7c\x2d\x48\xb2\xcf\x05\x19\x7a\x58\x60\xeb\xcc\xc0\xd6\x58\x80\x5e\x07\x5e\x02\xc9\x27\x64\x03\xb5\x13\x5e\x10\xa1\x87\x0a\x76\x89\xf8\x1c\xdb\x79\xe0\x9c\x8f\xdb\x01\xa4\xc2\x4f\x90\xa0\x87\x0f\x36\x88\x99\xd8\xa2\x82\x3e\xbf\x75\x8f\xee\x7c\xd3\xcf\x99\x9c\xea\x31\x89\x9a\xcf\x85\xfb\xa3\x30\xc2\xc6\x38\x80\xc9\xe1\xce\x7d\x73\x4b\x86\xce\x97\x70\xe8\x24\x38\x7b\xce\xbd\x5c\xf5\x5f\xe9\x67\x49\x0f\x23\x6c\x22\x52\xc9\x74\x01\x70\xd6\xd2\xfa\x3c\x6a\x74\xc5\xfa\xd1\xb9\x0f\xc1\x0f\xe8\x61\x85\xad\xb3\x04\x53\x33\x8d\x05\xc0\x4b\x73\x72\x8a\xe3\x66\x0f\x7e\x1c\x7b\x09\x3d\xac\xb0\x4b\xdc\xc4\x71\xf3\x3c\xab\xe4\xb6\x00\x38\x39\xe0\x99\xef\xeb\x63\x9d\xd2\x40\x9b\x17\xd0\xc3\x0d\x1b\x1a\x32\xed\xd9\x92\x9a\xf3\xff\x17\x01\x6f\x69\x6f\x7b\x11\x8f\x82\x0f\xe7\xbd\xf8\x77\xa4\x12\x7a\xd8\x61\x13\xc3\xe4\xf2\xd4\xc1\x4a\x7a\x8b\x80\xeb\x33\xe8\x6b\x6c\x4f\xa5\x47\xbf\x7e\xab\x80\x1e\x76\xd8\x3a\x2b\x30\xac\x5c\x0d\x81\xdc\x17\x01\x27\x47\x71\x61\xfb\x93\x78\xb6\x7f\x44\xc7\x41\xd8\x64\x42\x6f\x0a\xd8\x60\xa7\x33\xac\x02\xaf\x2a\x70\x5a\x0d\x07\x8f\x84\xbd\x55\xfc\xfb\xe6\x24\x03\x7a\x53\xc0\x06\x21\x62\x57\x6d\x45\x23\x82\x57\x15\x38\x9d\x48\xc4\x8b\x4f\xe0\x42\x4f\x3f\xa8\x50\xbc\xb5\xb6\x7a\xa0\x37\x11\xec\x19\x62\x67\xa5\xa3\x25\xf0\xf2\xca\x76\x83\x56\x17\xfa\xe5\xee\x06\x7a\xb3\xc0\x2e\x33\x19\xb4\x5a\x95\x90\xce\x5b\x02\xa7\x93\x89\x54\xe2\x61\xbc\xcb\xa5\x4d\xd6\x4e\x61\xca\xd8\x9c\x40\x6f\x2a\xd8\x60\xa5\x33\xab\x21\x72\x4d\xe0\xa5\x55\x6a\x45\x7f\x8d\xeb\x7d\x3b\x65\x07\x7a\x53\xc1\xd6\x49\x88\xfe\x5a\x2b\x0b\x93\x97\x05\x1f\x4f\xac\xe8\x75\x1f\xde\x31\x8e\x51\x0b\x81\x5c\x31\x81\x3e\xb8\xd0\xb0\xe4\xca\x91\xaa\xdf\x1c\xfd\xce\x45\xb3\x2c\x7b\x94\x6e\x0c\xab\x7c\x85\xc9\x1d\x20\x8f\x0d\x6f\xd9\xdf\xb1\x54\x9e\x68\x16\xa7\x25\xb7\x38\x8b\xf7\xe5\x78\x61\x12\xdd\x5f\xc9\x25\x3d\x7b\xec\x81\x80\x8a\xd9\x99\xbf\x6f\x3d\xb2\xf3\x3e\x63\xc4\x2a\x8d\x6b\x9b\x11\xb9\xc7\xd0\xd5\xd4\x1c\xeb\x9e\x73\x9e\x89\x8b\x58\x9f\x1d\xe9\x6d\x95\x70\x0a\x68\xeb\xe1\x9d\x03\x45\x26\x7e\x62\x27\xd0\xc8\x8f\xb7\x0a\x60\x90\xff\x4f\x0f\x6d\xd9\x37\x60\x27\xd6\x9a\xef\x70\x73\x00\xd7\xa4\x56\x3e\x84\x0a\xdc\xab\x66\xb7\xe8\x38\x00\x0a\x80\x89\xce\xc6\x66\x52\x6c\x97\x70\x0a\xaf\x7b\xfc\x9e\x55\x2c\x9b\x39\x85\xf7\xf9\x72\x9b\xe1\x47\xde\x14\x2a\x00\x78\x53\x2c\x91\x5c\x37\xdc\xf1\xd4\x59\xbb\xd1\xd8\x2e\xe1\x14\x20\x05\x2c\x78\xec\x2e\x54\xf5\xc0\x3c\xda\x7c\x55\x00\x0c\x88\x85\x13\xd8\x94\x5e\x47\xc0\xe9\x82\x91\xce\xa1\x23\xb8\xb3\x1e\xa7\xe3\x68\xf3\x4f\x01\x62\x40\x2c\x9c\xa6\xc0\x31\x70\x8a\x60\xdd\xb2\x55\x18\xdd\xc1\x4f\x38\x8d\x2c\xf2\x2f\x4b\x01\x7e\xa2\xc4\xc0\x79\x78\xb8\x51\xdc\x6d\xd4\xa9\x81\x05\xcf\x4f\xe2\xdb\xda\x9c\x81\x9c\xbb\x90\xa2\xab\x1c\x29\xc0\xd9\xe9\x64\x32\xb6\xde\xed\x74\x68\xae\x81\x53\x22\xef\x18\xeb\x5d\x91\xcf\x15\x51\x73\x17\x97\x3b\x4a\x74\xe4\xd9\xa5\x02\xfc\x4c\xbc\x45\xbb\xe1\xe0\xa6\xa1\x73\x2e\x03\x70\xfe\x0e\x37\x47\x44\x11\xb7\x30\x2c\x78\x1e\x10\x0b\x19\x73\xda\xc2\x76\x4c\x1a\x93\xd6\xf5\xc0\x26\x4d\xea\x2a\xe1\x86\xa8\x5b\x47\x77\x5e\x0b\x7b\xf6\x09\x54\xdd\x95\xce\xdb\x6a\xc4\xd7\x6c\x7b\x40\x4a\xc3\xd6\x70\xc3\xa1\xce\x7d\x6f\xd4\x9b\x77\x57\x95\xb6\xca\x48\x29\x21\x94\x20\xdc\x3e\xff\xab\x3c\x17\xfd\xae\x53\x01\x68\x2a\x0b\x36\xa5\x44\x0a\x70\x0a\x88\xa0\xb7\x88\xf8\x0d\x78\x68\x9c\xa1\xdf\xd1\x26\x43\x01\x7e\x86\x34\x95\x51\xb2\x8d\xd4\x48\x79\xa4\x1b\x81\xd1\xbe\x5c\x91\x1b\x8b\x6a\xef\x66\x55\xdc\x1c\xf3\x37\x51\x41\xdb\x54\xef\x3b\xbb\x32\x66\x69\x25\xdc\x08\x98\x12\x98\x6c\xd5\xb0\xce\x65\xd4\x4e\x37\x34\x71\xbe\xe7\x27\x48\x43\xd9\xb0\x29\x1d\xd2\x81\x53\xa0\xd4\x46\xfc\x72\x6a\xe5\xcd\xf8\x56\xfd\xcb\xa8\x1b\x96\x14\xb1\xb9\xa1\xbb\x94\x34\x23\xed\xdc\xb6\xb3\x97\x8a\x49\xfa\x23\xbd\x32\xc2\xae\xd1\xde\xcd\x5c\x14\x9e\x89\x3e\xb8\x54\x2a\xb3\xf0\x37\x40\x4c\x51\xdf\xb8\x9b\xee\xd2\x85\x21\xd5\xfe\xa5\x1c\x38\x45\xaf\x7f\x65\xcb\x65\x5f\x40\xd3\xed\xfa\xda\xc9\x69\xce\xb3\xa8\x85\xbf\xc6\x5a\x12\x5f\x77\xfa\x21\xc4\x8d\x5a\x4a\x1e\xe9\x95\x09\xa1\x8c\xac\x5b\xb6\x72\x3d\x7d\xa8\xc7\x37\xf5\x4c\xe5\xf9\xa6\xfd\x0d\x2d\x48\x13\xd2\xc6\x0b\xd8\xa4\xb3\x27\x25\xdc\x0c\x74\xdb\xe1\xbb\xaf\xc8\xb3\xfc\x20\x1e\xf1\x81\xb4\x91\x33\xa7\x55\xe5\x31\x84\x3f\x46\xa6\x63\x2f\x6e\x79\xfa\x5d\x95\xf1\x54\x86\xed\x39\x70\x23\x01\x5d\xa3\x3b\x7a\x70\xbf\xed\xc1\x57\xdd\xe6\xb0\x3b\x33\x32\xae\x9b\x7d\x8b\xfe\x91\xce\xfd\x07\x0c\x27\x2f\xf7\xbe\x01\xa7\x4c\xd2\x62\xf5\xd9\x99\xec\x83\x38\xec\xc3\x32\x94\x29\x2f\x33\xee\x75\x5c\xe8\x0b\xa7\x51\x3c\x83\x64\x37\xbe\x94\x29\xb1\xca\xb4\xf9\x0a\xdc\xc8\x58\xcf\xd8\x8e\xf6\x6c\x5e\xdb\x0d\xe8\xbb\x50\xe2\x2f\x32\xdc\x43\xb1\xc7\xc0\x3e\xc0\xde\x4b\xc3\x7f\x6a\x8d\x08\xf1\x2a\xaf\x81\x00\x6e\x64\xb6\xeb\x95\xfb\xdb\xf8\x27\xd3\xf7\x62\x4d\xf3\x7e\xc0\xbf\xd8\x70\x6f\xc4\x3d\x20\x7f\x88\x5e\x8e\x3d\x34\x8a\xd3\x6a\x60\x9f\x1f\xf9\x0a\x14\x70\x43\x80\x9e\xd7\xfa\x2f\xc8\x4d\xa7\xb7\xa1\x19\xb7\x1d\xef\xf9\x9b\x01\xdf\x93\xd6\x84\x11\xbf\xdb\x3d\x20\x63\x7e\x1c\x71\x1c\xcd\xac\xe7\x68\x62\x85\x6a\xe3\xb3\xdd\x86\x2d\xeb\xba\x40\x02\x37\x67\xae\xeb\x58\xdf\x25\x2c\x77\xfe\x4e\x2e\xd8\x76\x3f\xa7\x14\x33\xa7\xa9\xf2\x18\x80\x27\xf5\xd9\x92\x30\x81\x4e\xe5\x9c\x2a\x95\x7e\xfd\xfe\x1d\x78\xe0\x66\x81\xba\x8f\xf4\xae\xc5\x3b\xbe\x43\x88\xe2\x46\x94\xa6\x1b\xfd\xaa\xe8\x21\xee\x19\xc4\xfd\x67\xce\xb5\x97\xd1\xaf\x30\x3e\xbc\x79\x68\xd2\x9c\xce\x20\x1f\x37\x14\x70\xb3\x90\x03\x13\x03\xf1\xd3\xe7\xcf\x5d\x57\x2c\x14\x36\xa2\x4d\xbf\x1e\xe7\xae\x54\xd6\xc4\x43\x53\x4a\x9f\x6f\x1c\x53\x50\xd3\xac\xc4\x34\x51\xad\x31\x77\xa9\x39\x4d\x8d\x70\xdc\xb0\xc0\xab\x89\x4b\xcd\xbc\x42\x26\xbf\xba\x58\x28\xae\x41\xc5\x6f\x4d\x91\xb3\xd5\x00\x45\x83\x26\xda\x50\x12\xd1\xec\xc3\x5a\xe9\xa5\xe5\xb3\x0d\xcb\x9c\x34\xba\x9e\xd2\xa8\x27\xa4\x71\xb3\x50\xb3\x29\x8d\xaf\x17\x53\xfa\x4a\x4f\xb4\x20\x0c\xd6\x08\xa1\x65\x23\xfc\x6c\x46\x55\xcb\x67\x3d\x6e\xff\x07\x77\xe3\xfc\x8d\x1d\x64\xa9\x6e\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xc4\xe4\x19\x2f\x36\x0f\x00\x00"

func imgOkPngBytes() ([]byte, error) {
	return bindataRead(
		_imgOkPng,
		"img/ok.png",
	)
}

func imgOkPng() (*asset, error) {
	bytes, err := imgOkPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "img/ok.png", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"img/ok.png": imgOkPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"img": &bintree{nil, map[string]*bintree{
		"ok.png": &bintree{imgOkPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

